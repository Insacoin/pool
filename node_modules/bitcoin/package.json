{
  "name": "bitcoin",
  "description": "Communicate with bitcoind via JSON-RPC",
  "version": "3.0.1",
  "main": "lib/index.js",
  "keywords": [
    "bitcoin",
    "rpc"
  ],
  "author": {
    "name": "Bill Casarin",
    "email": "bill@casarin.ca",
    "url": "jb55.com"
  },
  "contributors": [
    {
      "name": "Sean Lavine",
      "email": "sean@eternalrise.com"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "clone": "^1.0.2",
    "mocha": "^2.3.3",
    "standard": "^5.3.1"
  },
  "optionalDependencies": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/freewil/node-bitcoin.git"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "pretest": "standard --verbose",
    "test": "make test"
  },
  "bugs": {
    "url": "https://github.com/freewil/node-bitcoin/issues"
  },
  "homepage": "https://github.com/freewil/node-bitcoin#readme",
  "directories": {
    "test": "test"
  },
  "license": "Unlicense",
  "readme": "# node-bitcoin\n[![travis][travis-image]][travis-url]\n[![npm][npm-image]][npm-url]\n[![downloads][downloads-image]][downloads-url]\n[![js-standard-style][standard-image]][standard-url]\n\n[travis-image]: https://travis-ci.org/freewil/node-bitcoin.svg?branch=master\n[travis-url]: https://travis-ci.org/freewil/node-bitcoin\n\n[npm-image]: https://img.shields.io/npm/v/bitcoin.svg?style=flat\n[npm-url]: https://npmjs.org/package/bitcoin\n\n[downloads-image]: https://img.shields.io/npm/dm/bitcoin.svg?style=flat\n[downloads-url]: https://npmjs.org/package/bitcoin\n\n[standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat\n[standard-url]: http://standardjs.com\n\nnode-bitcoin is a simple wrapper for the Bitcoin client's JSON-RPC API.\n\nThe API is equivalent to the API document [here](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list).\nThe methods are exposed as lower camelcase methods on the `bitcoin.Client`\nobject, or you may call the API directly using the `cmd` method.\n\nThis module uses callbacks, which is the prevalent way to work with asynchronous functions in Node.js. If you'd like to instead use promises, then please see the [bitcoin-promise](https://github.com/rcorbish/node-bitcoin-promise) module.\n\n## Install\n\n`npm install bitcoin`\n\n## Examples\n\n### Create client\n```js\n// all config options are optional\nvar client = new bitcoin.Client({\n  host: 'localhost',\n  port: 8332,\n  user: 'username',\n  pass: 'password',\n  timeout: 30000\n});\n```\n\n### Get balance across all accounts with minimum confirmations of 6\n\n```js\nclient.getBalance('*', 6, function(err, balance, resHeaders) {\n  if (err) return console.log(err);\n  console.log('Balance:', balance);\n});\n```\n### Getting the balance directly using `cmd`\n\n```js\nclient.cmd('getbalance', '*', 6, function(err, balance, resHeaders){\n  if (err) return console.log(err);\n  console.log('Balance:', balance);\n});\n```\n\n### Batch multiple RPC calls into single HTTP request\n\n```js\nvar batch = [];\nfor (var i = 0; i < 10; ++i) {\n  batch.push({\n    method: 'getnewaddress',\n    params: ['myaccount']\n  });\n}\nclient.cmd(batch, function(err, address, resHeaders) {\n  if (err) return console.log(err);\n  console.log('Address:', address);\n});\n```\n\n## SSL\nSee [Enabling SSL on original client](https://en.bitcoin.it/wiki/Enabling_SSL_on_original_client_daemon).\n\nIf you're using this to connect to bitcoind across a network it is highly\nrecommended to enable `ssl`, otherwise an attacker may intercept your RPC credentials\nresulting in theft of your bitcoins.\n\nWhen enabling `ssl` by setting the configuration option to `true`, the `sslStrict`\noption (verifies the server certificate) will also be enabled by default. It is\nhighly recommended to specify the `sslCa` as well, even if your bitcoind has\na certificate signed by an actual CA, to ensure you are connecting\nto your own bitcoind.\n\n```js\nvar client = new bitcoin.Client({\n  host: 'localhost',\n  port: 8332,\n  user: 'username',\n  pass: 'password',\n  ssl: true,\n  sslStrict: true,\n  sslCa: fs.readFileSync(__dirname + '/myca.cert')\n});\n```\n",
  "readmeFilename": "Readme.md",
  "_id": "bitcoin@3.0.1",
  "dist": {
    "shasum": "af824ac8e51d1ef7138d1641495e1058c19b0405"
  },
  "deprecated": "Use npmjs.com/bitcoin-core instead as this package is no longer maintained.",
  "_from": "bitcoin@3.0.1",
  "_resolved": "https://registry.npmjs.org/bitcoin/-/bitcoin-3.0.1.tgz"
}
