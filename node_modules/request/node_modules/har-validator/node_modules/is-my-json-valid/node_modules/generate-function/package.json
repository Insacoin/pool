{
  "name": "generate-function",
  "version": "2.3.1",
  "description": "Module that helps you write generated functions in Node",
  "main": "index.js",
  "scripts": {
    "test": "tape test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mafintosh/generate-function"
  },
  "keywords": [
    "generate",
    "code",
    "generation",
    "function",
    "performance"
  ],
  "author": {
    "name": "Mathias Buus"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mafintosh/generate-function/issues"
  },
  "homepage": "https://github.com/mafintosh/generate-function",
  "devDependencies": {
    "tape": "^4.9.1"
  },
  "dependencies": {
    "is-property": "^1.0.2"
  },
  "readme": "# generate-function\n\nModule that helps you write generated functions in Node\n\n```\nnpm install generate-function\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/generate-function.svg?style=flat)](http://travis-ci.org/mafintosh/generate-function)\n\n## Disclamer\n\nWriting code that generates code is hard.\nYou should only use this if you really, really, really need this for performance reasons (like schema validators / parsers etc).\n\n## Usage\n\n``` js\nconst genfun = require('generate-function')\nconst { d } = genfun.formats\n\nfunction addNumber (val) {\n  const gen = genfun()\n\n  gen(`\n    function add (n) {')\n      return n + ${d(val)}) // supports format strings to insert values\n    }\n  `)\n\n  return gen.toFunction() // will compile the function\n}\n\nconst add2 = addNumber(2)\n\nconsole.log('1 + 2 =', add2(1))\nconsole.log(add2.toString()) // prints the generated function\n```\n\nIf you need to close over variables in your generated function pass them to `toFunction(scope)`\n\n``` js\nfunction multiply (a, b) {\n  return a * b\n}\n\nfunction addAndMultiplyNumber (val) {\n  const gen = genfun()\n  \n  gen(`\n    function (n) {\n      if (typeof n !== 'number') {\n        throw new Error('argument should be a number')\n      }\n      const result = multiply(${d(val)}, n + ${d(val)})\n      return result\n    }\n  `)\n\n  // use gen.toString() if you want to see the generated source\n\n  return gen.toFunction({multiply})\n}\n\nconst addAndMultiply2 = addAndMultiplyNumber(2)\n\nconsole.log(addAndMultiply2.toString())\nconsole.log('(3 + 2) * 2 =', addAndMultiply2(3))\n```\n\nYou can call `gen(src)` as many times as you want to append more source code to the function.\n\n## Variables\n\nIf you need a unique safe identifier for the scope of the generated function call `str = gen.sym('friendlyName')`.\nThese are safe to use for variable names etc.\n\n## Object properties\n\nIf you need to access an object property use the `str = gen.property('objectName', 'propertyName')`.\n\nThis returns `'objectName.propertyName'` if `propertyName` is safe to use as a variable. Otherwise\nit returns `objectName[propertyNameAsString]`.\n\nIf you only pass `gen.property('propertyName')` it will only return the `propertyName` part safely\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "generate-function@2.3.1",
  "dist": {
    "shasum": "e3b5d5b286e88fd4dfc7980a7d332ee8745b7e11"
  },
  "_from": "generate-function@^2.0.0",
  "_resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz"
}
